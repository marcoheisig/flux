(define-module (sdl2 events)
  #:use-module (sdl2 error)
  #:use-module (utils marco)
  #:use-module (system foreign)
  #:use-module (rnrs bytevectors)
  #:export
  (
   poll-event
   handle-events
   quit-event-hook
   window-event-hook
   mouse-button-event-hook
   keyboard-event-hook
   mousemotion-event-hook
   ))

(define-public-constants
  (SDL_FIRSTEVENT                0     )
  (SDL_QUIT                      #x100 )
  (SDL_APP_TERMINATING           #x101 )
  (SDL_APP_LOWMEMORY             #x102 )
  (SDL_APP_WILLENTERBACKGROUND   #x103 )
  (SDL_APP_DIDENTERBACKGROUND    #x104 )
  (SDL_APP_WILLENTERFOREGROUND   #x105 )
  (SDL_APP_DIDENTERFOREGROUND    #x106 )
  (SDL_WINDOWEVENT               #x200 )
  (SDL_SYSWMEVENT                #x201 )
  (SDL_KEYDOWN                   #x300 )
  (SDL_KEYUP                     #x301 )
  (SDL_TEXTEDITING               #x302 )
  (SDL_TEXTINPUT                 #x303 )
  (SDL_MOUSEMOTION               #x400 )
  (SDL_MOUSEBUTTONDOWN           #x401 )
  (SDL_MOUSEBUTTONUP             #x402 )
  (SDL_MOUSEWHEEL                #x403 )
  (SDL_JOYAXISMOTION             #x600 )
  (SDL_JOYBALLMOTION             #x601 )
  (SDL_JOYHATMOTION              #x602 )
  (SDL_JOYBUTTONDOWN             #x603 )
  (SDL_JOYBUTTONUP               #x604 )
  (SDL_JOYDEVICEADDED            #x605 )
  (SDL_JOYDEVICEREMOVED          #x606 )
  (SDL_CONTROLLERAXISMOTION      #x650 )
  (SDL_CONTROLLERBUTTONDOWN      #x651 )
  (SDL_CONTROLLERBUTTONUP        #x652 )
  (SDL_CONTROLLERDEVICEADDED     #x653 )
  (SDL_CONTROLLERDEVICEREMOVED   #x654 )
  (SDL_CONTROLLERDEVICEREMAPPED  #x655 )
  (SDL_FINGERDOWN                #x700 )
  (SDL_FINGERUP                  #x701 )
  (SDL_FINGERMOTION              #x702 )
  (SDL_DOLLARGESTURE             #x800 )
  (SDL_DOLLARRECORD              #x801 )
  (SDL_MULTIGESTURE              #x802 )
  (SDL_CLIPBOARDUPDATE           #x900 )
  (SDL_DROPFILE                  #x1000)
  (SDL_USEREVENT                 #x8000)
  (SDL_LASTEVENT                 #xFFFF)
  )

(define libsdl2 (dynamic-link "libSDL2"))
(from-lib
 libsdl2
 (SDL_AddEventWatch          void "SDL_AddEventWatch"          '* '*                   )
 (SDL_DelEventWatch          void "SDL_DelEventWatch"          '* '*                   )
 (SDL_EventState            uint8 "SDL_EventState"             uint32 int              )
 (SDL_FilterEvents           void "SDL_FilterEvents"           '* '*                   )
 (SDL_FlushEvent             void "SDL_FlushEvent"             uint32                  )
 (SDL_FlushEvents            void "SDL_FlushEvents"            uint32 uint32           )
 (SDL_GetEventFilter          int "SDL_GetEventFilter"         '* '*                   )
 (SDL_GetNumTouchDevices      int "SDL_GetNumTouchDevices"                             )
 (SDL_GetNumTouchFingers      int "SDL_GetNumTouchFingers"     int64                   )
 (SDL_GetTouchDevice        int64 "SDL_GetTouchDevice"         int                     )
 (SDL_GetTouchFinger           '* "SDL_GetTouchFinger"         int64 int               )
 (SDL_HasEvent                int "SDL_HasEvent"               uint32                  )
 (SDL_HasEvents               int "SDL_HasEvents"              uint32 uint32           )
 (SDL_LoadDollarTemplates     int "SDL_LoadDollarTemplates"    int64 '*                )
 (SDL_PeepEvents              int "SDL_PeepEvents"             '* int int uint32 uint32)
 (SDL_PollEvent               int "SDL_PollEvent"              '*                      )
 (SDL_PumpEvents             void "SDL_PumpEvents"                                     )
 (SDL_PushEvent               int "SDL_PushEvent"              '*                      )
 (SDL_RecordGesture           int "SDL_RecordGesture"          int64                   )
 (SDL_RegisterEvents       uint32 "SDL_RegisterEvents"         int                     )
 (SDL_SaveAllDollarTemplates  int "SDL_SaveAllDollarTemplates" '*                      )
 (SDL_SaveDollarTemplate      int "SDL_SaveDollarTemplate"     int64                   )
 (SDL_SetEventFilter         void "SDL_SetEventFilter"         '* '*                   )
 (SDL_WaitEvent               int "SDL_WaitEvent"              '*                      )
 (SDL_WaitEventTimeout        int "SDL_WaitEventTimeout"       '* int                  )
 )

(define quit-event-hook            (make-hook 2))
(define window-event-hook          (make-hook 6))
(define mouse-button-event-hook    (make-hook 8))
(define keyboard-event-hook        (make-hook 8))
(define mousemotion-event-hook     (make-hook 9))

(define (poll-event)
  "Poll for currently pending events (as unformatted 56 byte block)"
  (let* ((event  (make-bytevector 56))
         (*event (bytevector->pointer event))
         (rtn    (SDL_PollEvent *event)))
    (if (= 0 rtn) #f event)))

(define (handle-events)
  "remove all pending events from the event queue and call the appropriate event hooks"
  (do ((struct (poll-event) (poll-event)))
      ((not struct))
    (let ((type      (bytevector-u32-native-ref struct 0))
          (timestamp (bytevector-u32-native-ref struct 4)))
      (cond
       ((= type SDL_QUIT)
        (run-hook quit-event-hook
                  type timestamp))
       ((= type SDL_WINDOWEVENT)
        (let ((window-id (bytevector-u32-native-ref struct 8))
              (event     (bytevector-u8-ref         struct 12))
              (data1     (bytevector-u32-native-ref struct 13))
              (data2     (bytevector-u32-native-ref struct 17)))
          (run-hook window-event-hook
                    type timestamp window-id event data1 data2)))
       ((or (= type SDL_MOUSEBUTTONUP) (= type SDL_MOUSEBUTTONDOWN))
        (let ((window-id (bytevector-u32-native-ref struct 8))
              (which     (bytevector-u32-native-ref struct 12))
              (button    (bytevector-u8-ref         struct 16))
              (state     (bytevector-u8-ref         struct 17))
              (x         (bytevector-s32-native-ref struct 18))
              (y         (bytevector-s32-native-ref struct 22)))
          (run-hook mouse-button-event-hook
                    type timestamp window-id which button state x y)))
       ((or (= type SDL_KEYDOWN) (= type SDL_KEYUP))
        (let ((window-id (bytevector-u32-native-ref struct 8))
              (state     (bytevector-u8-ref         struct 12))
              (repeat    (bytevector-u8-ref         struct 13))
              (scancode  (bytevector-s32-native-ref struct 14))
              (keycode   (bytevector-s32-native-ref struct 18))
              (mod       (bytevector-u16-native-ref struct 22)))
          (run-hook keyboard-event-hook
                    type timestamp window-id state repeat scancode keycode mod)))
       ((= type SDL_MOUSEMOTION)
        (let ((window-id (bytevector-u32-native-ref struct 8))
              (which     (bytevector-u32-native-ref struct 12))
              (state     (bytevector-u32-native-ref struct 16))
              (x         (bytevector-s32-native-ref struct 20))
              (y         (bytevector-s32-native-ref struct 24))
              (xrel      (bytevector-s32-native-ref struct 28))
              (yrel      (bytevector-s32-native-ref struct 32)))
          (run-hook mousemotion-event-hook
                    type timestamp window-id which state x y xrel yrel)))))))
